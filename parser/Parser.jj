
options
{
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  USER_TOKEN_MANAGER = false;
}

PARSER_BEGIN(ProgramParser)
package parser;
//import path_to_packages;

public final class ProgramParser
{
  // the graph to parse
  private static Graph graph;

  private static void initVariables (){
  	// TODO 
  }

  /** init or reinit the parser
  ** to be used when one wants to read part of a program */
  public static void init(java.io.Reader in)
  {
    // init the enum and ID creator
    enumIdCreator = new EnumConstCreator2();
    if (token_source == null)
    	new ProgramParser(in);
    else
    	ReInit(in);
  }
}
PARSER_END(ProgramParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN :
{
  < EQ : "=" >
| < LT : "<" >
| < LE : "<=" >
| < GT : ">" >
| < GE : ">=" >
| < NEQ : "!=" >
| < AND :    "AND"  | "and" >
| < WHEN :    "WHEN"  | "when"  | "WHENP"  | "whenp" >
| < WITH : "WITH" | "with" >
| < OR : "OR" | "or" >
| < NOT : "NOT" | "not" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < NUMBER : ("-")? ([ "0"-"9" ])+ >
| < COMMENT : "//" (~[ "\n" ])+ "\n" >
| < TRUE :    "true"  | "TRUE" >
| < FALSE :    "false"  | "FALSE" >
}


public void parseProgram(Graph g) :
{
  Token token;
  String name;
  String out;
  graph = g;
  initVariables();
}
{
	<ID>
	("program" | "class") name = ID()  "{" out = statement() "}"
	{
		System.out.println(out);
	}
  
}


String statement() :
{
String out;
}
{
	(
		out = assignmentStatement() { System.out.println("add assign to graph "); }
	| 
		out = ifStatement() { System.out.println("add assign to graph "); }
	|
		out = whileStatement() { System.out.println("add assign to graph "); }
	)+
	{
		return out;
	}
}


String assignmentStatement() :
{
String id,exp;
}
{
	id = ID() "=" exp = mathExpression() ";"
	{
		return id + " = " + exp + ";" ;
	}
}

String ifStatement() :
{
String e, s1, s2;
}
{
	"if" "(" e = logicExpression() ")" "then" "{" s1 = statement() "}" "else" "{" s2 = statement() "}"
	{
		return "if" + e + "then" + s1 + "else" + s2 ;
	} 
}


String whileStatement() :
{
String s,e;
}
{
	"do" "{" s = statement() "}" "while" "(" e = logicExpression() ")"
	{
		return " while " + e + " do " + s;
	} 
}

String logicExpression() :
{
String out;
Token token;
}
{
	( token = <TRUE> | token = <FALSE> ) {return token.image;}

}


// math Expression
// + 
String mathExpression() :
{
  String e, e2;
}
{
  e = mathElement()  [< PLUS > e2 = mathElement() { e = e + " + " + e2;} ]
  {
	return e;
  }
}


String mathElement() :
{
  Token t;  
  String id;
}
{
  (
    t = < NUMBER >
    {
      return t.image;
    }
  | id = ID()
    {    
      return id;
    }  
  )
}

String ID() :
{
  Token t;
}
{
  t = < ID >
  {
    return t.image;
  }
}


TOKEN :
{
	< ID : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
}
